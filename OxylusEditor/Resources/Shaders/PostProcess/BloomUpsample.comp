#version 460 core
#pragma shader_stage(compute)

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) restrict writeonly uniform image2D ImgResult;
layout(binding = 1) uniform sampler2D SamplerUpsample; // last mip
layout(binding = 2) uniform sampler2D SamplerDownsample; // last - 1 mip

vec3 Upsample(sampler2D srcTexture, vec2 uv);

void main()
{
    ivec2 imgCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imgSize = imageSize(ImgResult);
    if (any(greaterThanEqual(imgCoord, imgSize)))
        return;

    vec2 uv = (imgCoord + 0.5) / imgSize;
    
    vec3 result = Upsample(SamplerUpsample, uv) + texture(SamplerDownsample, uv).rgb;
    imageStore(ImgResult, imgCoord, vec4(result, 1.0));
}

vec3 Upsample(sampler2D src, vec2 uv)
{
    vec3 result = textureOffset(src, uv, ivec2(-1.0, 1.0)).rgb * 1.0;
    result     += textureOffset(src, uv, ivec2( 0.0, 1.0)).rgb * 2.0;
    result     += textureOffset(src, uv, ivec2( 1.0, 1.0)).rgb * 1.0;

    result     += textureOffset(src, uv, ivec2(-1.0, 0.0)).rgb * 2.0;
    result     += texture(src, uv).rgb * 4.0;
    result     += textureOffset(src, uv, ivec2( 1.0, 0.0)).rgb * 2.0;
    
    result     += textureOffset(src, uv, ivec2(-1.0, -1.0)).rgb * 1.0;
    result     += textureOffset(src, uv, ivec2( 0.0, -1.0)).rgb * 2.0;
    result     += textureOffset(src, uv, ivec2( 1.0, -1.0)).rgb * 1.0;

    return result / 16.0;
}