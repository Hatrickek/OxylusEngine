#version 460 core
#pragma shader_stage(compute)

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) restrict writeonly uniform image2D ImgResult;
layout(binding = 1) uniform sampler2D SamplerDownsample;

vec3 Downsample(sampler2D srcTexture, vec2 uv);

void main()
{
    ivec2 imgCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imgSize = imageSize(ImgResult);
    if (any(greaterThanEqual(imgCoord, imgSize)))
        return;

    vec2 uv = (imgCoord + 0.5) / imgSize;
    
    vec3 result = Downsample(SamplerDownsample, uv);
    imageStore(ImgResult, imgCoord, vec4(result, 1.0));
}

vec3 Downsample(sampler2D src, vec2 uv)
{
    vec3 center = texture(src, uv).rgb;
    vec3 yellowUpRight  = textureOffset(src, uv, ivec2( 0,  2)).rgb;
    vec3 yellowDownLeft = textureOffset(src, uv, ivec2(-2,  0)).rgb;
    vec3 greenDownRight = textureOffset(src, uv, ivec2( 2,  0)).rgb;
    vec3 blueDownLeft   = textureOffset(src, uv, ivec2( 0, -2)).rgb;

    vec3 yellow  = textureOffset(src, uv, ivec2(-2,  2)).rgb;
    yellow      += yellowUpRight;
    yellow      += center;
    yellow      += yellowDownLeft;

    vec3 green = yellowUpRight;
    green     += textureOffset(src, uv, ivec2( 2,  2)).rgb;
    green     += greenDownRight;
    green     += center;

    vec3 blue = center;
    blue     += greenDownRight;
    blue     += textureOffset(src, uv, ivec2( 2, -2)).rgb;
    blue     += blueDownLeft;

    vec3 lila  = yellowDownLeft;
    lila      += center;
    lila      += blueDownLeft;
    lila      += textureOffset(src, uv, ivec2(-2, -2)).rgb;

    vec3 red = textureOffset(src, uv, ivec2(-1,  1)).rgb;
    red     += textureOffset(src, uv, ivec2( 1,  1)).rgb;
    red     += textureOffset(src, uv, ivec2( 1, -1)).rgb;
    red     += textureOffset(src, uv, ivec2(-1, -1)).rgb;

    return (red * 0.5 + (yellow + green + blue + lila) * 0.125) * 0.25;
}